const { Plugin } = require('powercord/entities');
/* eslint-disable */
module.exports = class Texter extends Plugin {
  startPlugin() {
    for (const alias of ["fw", "fullwidth"]) {
      powercord.api.commands.registerCommand({
        command: alias,
        description: 'ÔΩÜÔΩïÔΩåÔΩå„ÄÄÔΩóÔΩâÔΩÑÔΩîÔΩàÔΩì„ÄÄÔΩôÔΩèÔΩïÔΩí„ÄÄÔΩîÔΩÖÔΩòÔΩî',
        usage: '{c} [Text you want to flip]',
        executor: (args) => ({
          send: true,
          result: args.join(' ').fullWidth(),
        }),
      });
    }
    powercord.api.commands.registerCommand({
      command: 'shrug',
      description: 'appends ¬Ø\\_(„ÉÑ)_/¬Ø to you message',
      usage: '{c} [.shrug]',
      executor: (args) => ({
        send: true,
        result: args.join(' ') + "¬Ø\\_(„ÉÑ)_/¬Ø",
      }),
    });
    powercord.api.commands.registerCommand({
      command: 'small',
      description: 'makes your text smaller',
      usage: '{c} [text that you want to make small]',
      executor: (args) => ({
        send: true,
        result: args.join(' ').small(),
      }),
    });

    powercord.api.commands.registerCommand({
      command: 'smaller',
      description: 'Makes your text tiny',
      usage: '{c} [tiny input]',
      executor: (args) => ({
        send: true,
        result: args.join(' ').smaller()
      }),
    });
    powercord.api.commands.registerCommand({
      command: 'reverse',
      description: 'Reverse some text',
      usage: '{c} [text to reverse!]',
      executor: (args) => ({
        send: true,
        result: args.join(' ').split('').reverse().join(''),
      }),
    });
    powercord.api.commands.registerCommand({
      command: 'reflip',
      description: 'reflips your text',
      usage: '{c} [text to reflip!]',
      executor: (args) => ({
        send: true,
        result: args.join(' ').split('').reverse().join('').flip(),
      }),
    });
    powercord.api.commands.registerCommand({
      command: 'clap',
      description: 'adds clap emojis to your text',
      usage: '{c} [Text to clap]',
      executor: (args) => ({
        send: true,
        result: 'üëè' + args.join('üëè') + 'üëè',
      }),
    });

    powercord.api.commands.registerCommand({
      command: 'flip',
      description: 'flips your text',
      usage: '{c} [input]',
      executor: (args) => ({
        send: true,
        result: args.join(' ').flip(),
      }),
    });
    powercord.api.commands.registerCommand({
      command: 'space',
      description: 'Like .clap except it lets you pick anything you want to put inbetween the words.',
      usage: '{c} [space <char> [sentence...]]',
      executor: (args) => ({
        send: true,
        result: space(args),
      }),
    });
  }

  pluginWillUnload() {
    for (const command of ["flip", "fw", "clap", "reflip", "reverse", "small", "smaller", "shrug"]) {
      powercord.api.commands.unregisterCommand(command)
    }
  }
};

function space(args) {
  const char = args[0];
  const str = args.slice(1).join(char);
  return str + char;
}
/**
 * 
 * @returns «´ ·¥° ·¥á  Ä ·¥õ  è ·¥ú …™ ·¥è ·¥ò ·¥Ä s ·¥Ö Íú∞ …¢  ú ·¥ä ·¥ã  ü ·¥¢ x ·¥Ñ ·¥†  ô …¥ ·¥ç
 */
String.prototype.small = function () {
  return this
    .replace(/q/ig, '«´')
    .replace(/w/gi, '·¥°')
    .replace(/e/gi, '·¥á')
    .replace(/r/gi, ' Ä')
    .replace(/t/gi, '·¥õ')
    .replace(/y/gi, ' è')
    .replace(/u/gi, '·¥ú')
    .replace(/i/gi, '…™')
    .replace(/o/gi, '·¥è')
    .replace(/p/gi, '·¥ò')
    .replace(/a/gi, '·¥Ä')
    .replace(/s/gi, 's')
    .replace(/d/gi, '·¥Ö')
    .replace(/f/gi, 'Íú∞')
    .replace(/g/gi, '…¢')
    .replace(/h/gi, ' ú')
    .replace(/j/gi, '·¥ä')
    .replace(/k/gi, '·¥ã')
    .replace(/l/gi, ' ü')
    .replace(/z/gi, '·¥¢')
    .replace(/x/gi, 'x')
    .replace(/c/gi, '·¥Ñ')
    .replace(/v/gi, '·¥†')
    .replace(/b/gi, ' ô')
    .replace(/n/gi, '…¥')
    .replace(/m/gi, '·¥ç');
};

/**
 * 
 * @returns ·ë´  ∑ ·µâ  ≥ ·µó  ∏ ·µò ·∂¶ ·µí ·µñ ·µÉ À¢ ·µà ·∂† ·µç  ∞  ≤ ·µè À° ·∂ª À£ ·∂ú ·µõ ·µá ‚Åø ·µê
 */
String.prototype.smaller = function () {
  return this.replace(/q/gi, '·ë´')
    .replace(/w/gi, ' ∑')
    .replace(/e/gi, '·µâ')
    .replace(/r/gi, ' ≥')
    .replace(/t/gi, '·µó')
    .replace(/y/gi, ' ∏')
    .replace(/u/gi, '·µò')
    .replace(/i/gi, '·∂¶')
    .replace(/o/gi, '·µí')
    .replace(/p/gi, '·µñ')
    .replace(/a/gi, '·µÉ')
    .replace(/s/gi, 'À¢')
    .replace(/d/gi, '·µà')
    .replace(/f/gi, '·∂†')
    .replace(/g/gi, '·µç')
    .replace(/h/gi, ' ∞')
    .replace(/j/gi, ' ≤')
    .replace(/k/gi, '·µè')
    .replace(/l/gi, 'À°')
    .replace(/z/gi, '·∂ª')
    .replace(/x/gi, 'À£')
    .replace(/c/gi, '·∂ú')
    .replace(/v/gi, '·µõ')
    .replace(/b/gi, '·µá')
    .replace(/n/gi, '‚Åø')
    .replace(/m/gi, '·µê');
};
/**
 * 
 * @returns q  ç «ù …π  á  é u ƒ± o d …ê s d …ü ∆É …• …æ  û l z x …î  å q u …Ø
 */
String.prototype.flip = function () {
  return this.replace(/a/gi, '\u0250')
    .replace(/b/gi, 'q')
    .replace(/c/gi, '\u0254')
    .replace(/d/gi, 'p')
    .replace(/p/gi, 'd')
    .replace(/e/gi, '\u01DD')
    .replace(/f/gi, '\u025F')
    .replace(/g/gi, '\u0183')
    .replace(/h/gi, '\u0265')
    .replace(/i/gi, '\u0131')
    .replace(/j/gi, '\u027E')
    .replace(/k/gi, '\u029E')
    .replace(/m/gi, '\u026F')
    .replace(/n/gi, 'u')
    .replace(/r/gi, '\u0279')
    .replace(/t/gi, '\u0287')
    .replace(/v/gi, '\u028C')
    .replace(/w/gi, '\u028D')
    .replace(/y/gi, '\u028E')
    .replace(/\./gi, '\u02D9')
    .replace(/\[/gi, ']')
    .replace(/\(/gi, ')')
    .replace(/{/gi, '}')
    .replace(/\?/gi, '\u00BF')
    .replace(/!/gi, '\u00A1')
    .replace(/'/gi, ',')
    .replace(/</gi, '>')
    .replace(/>/gi, '<')
    .replace(/_/gi, '\u203E')
    .replace(/;/gi, '\u061B')
    .replace(/\u203F/gi, '\u2040')
    .replace(/\u2045/gi, '\u2046')
    .replace(/\u2234/gi, '\u2235')
    .replace(/\r/gi, '\n');
};
/**
 * 
 * @returns ÔΩë„ÄÄÔΩó„ÄÄÔΩÖ„ÄÄÔΩí„ÄÄÔΩî„ÄÄÔΩô„ÄÄÔΩï„ÄÄÔΩâ„ÄÄÔΩè„ÄÄÔΩê„ÄÄÔΩÅ„ÄÄÔΩì„ÄÄÔΩÑ„ÄÄÔΩÜ„ÄÄÔΩá„ÄÄÔΩà„ÄÄÔΩä„ÄÄÔΩã„ÄÄÔΩå„ÄÄÔΩö„ÄÄÔΩò„ÄÄÔΩÉ„ÄÄÔΩñ„ÄÄÔΩÇ„ÄÄÔΩé„ÄÄÔΩç
 */
String.prototype.fullWidth = function () {
  return this
    .replace(/ /gi, "„ÄÄ")
    .replace(/q/ig, 'ÔΩë')
    .replace(/w/gi, 'ÔΩó')
    .replace(/e/gi, 'ÔΩÖ')
    .replace(/r/gi, 'ÔΩí')
    .replace(/t/gi, 'ÔΩî')
    .replace(/y/gi, 'ÔΩô')
    .replace(/u/gi, 'ÔΩï')
    .replace(/i/gi, 'ÔΩâ')
    .replace(/o/gi, 'ÔΩè')
    .replace(/p/gi, 'ÔΩê')
    .replace(/a/gi, 'ÔΩÅ')
    .replace(/s/gi, 'ÔΩì')
    .replace(/d/gi, 'ÔΩÑ')
    .replace(/f/gi, 'ÔΩÜ')
    .replace(/g/gi, 'ÔΩá')
    .replace(/h/gi, 'ÔΩà')
    .replace(/j/gi, 'ÔΩä')
    .replace(/k/gi, 'ÔΩã')
    .replace(/l/gi, 'ÔΩå')
    .replace(/z/gi, 'ÔΩö')
    .replace(/x/gi, 'ÔΩò')
    .replace(/c/gi, 'ÔΩÉ')
    .replace(/v/gi, 'ÔΩñ')
    .replace(/b/gi, 'ÔΩÇ')
    .replace(/n/gi, 'ÔΩé')
    .replace(/m/gi, 'ÔΩç');
};